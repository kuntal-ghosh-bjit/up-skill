import Head from "next/head";
import { Inter } from "@next/font/google";
import Checkout from "@/components/organism/Checkout";
import { Dispatch, useReducer, useState } from "react";
import { IOrder } from "@/model/order";
import { OrderContext } from "@/contexts/OrderContext";
import { FormContext } from "@/contexts/formContext";
const inter = Inter({ subsets: ["latin"] });

// An enum with all the types of actions to use in our reducer
export enum OrderActionKind {
  FIRSTNAME = "firstName",
  LASTNAME = "lastName",
  ADDRESS = "address",
  city = "city",
  country = "country",
  nameOnCard = "nameOnCard",
  cardNumber = "cardNumber",
  expiryDate = "expiryDate",
  cvv = "cvv",
}

// An interface for our actions
interface OrderAction {
  type: OrderActionKind;
  payload: string;
}

function reducer(state: IOrder, { type, payload }: OrderAction): IOrder {
  switch (type) {
    case OrderActionKind.FIRSTNAME:
      return { ...state, firstName: payload };
    case OrderActionKind.LASTNAME:
      return { ...state, lastName: payload };
    case OrderActionKind.ADDRESS:
      return { ...state, address: payload };
    case OrderActionKind.city:
      return { ...state, city: payload };
    case OrderActionKind.country:
      return { ...state, country: payload };
    case OrderActionKind.nameOnCard:
      return {
        ...state,
        paymentInfo: { ...state.paymentInfo, nameOnCard: payload },
      };
    case OrderActionKind.cardNumber:
      return {
        ...state,
        paymentInfo: { ...state.paymentInfo, cardNumber: payload },
      };
    case OrderActionKind.expiryDate:
      return {
        ...state,
        paymentInfo: { ...state.paymentInfo, expiryDate: payload },
      };
    case OrderActionKind.expiryDate:
      return { ...state, paymentInfo: { ...state.paymentInfo, cvv: payload } };
    default:
      return { ...state };
  }
}

export default function Home() {
  const [state, dispatch] = useReducer<any, unknown>(reducer, {}, () => {});
  const value = {
    state,
    dispatch,
  };
  interface FormValues {
    name: string;
    email: string;
  }
  const [formState, setFormState] = useState<FormValues>({
    name: "",
    email: "",
  });
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <FormContext.Provider
          value={{
            formState: state as IOrder,
            dispatch,
            resetForm: () => setFormState({ name: "", email: "" }),
          }}
        >
          <Checkout />
        </FormContext.Provider>
      </main>
    </>
  );
}
